#CITY TABLE ANSWERS

SELECT * FROM CITY;
#Q1
SELECT * FROM CITY WHERE POPULATION > 100000;
#Q2
SELECT * FROM CITY WHERE COUNTRYCODE = "USA" HAVING POPULATION > 120000;
#Q3
SELECT * FROM CITY;
#Q4
SELECT * FROM CITY WHERE ID = "1661";
#Q5
SELECT * FROM CITY WHERE COUNTRYCODE = "JPN";
#Q6
SELECT NAME FROM CITY WHERE COUNTRYCODE = "JPN";

USE MYDB;

#Q7
SELECT CITY,STATE FROM STATION;
#Q8
SELECT DISTINCT CITY FROM STATION WHERE ID%2 = 0;
#Q9
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;
#Q10
(SELECT CITY, length(CITY) FROM STATION GROUP BY CITY HAVING LENGTH(CITY) IN (SELECT max(length(CITY)) FROM STATION) LIMIT 1) union all
(SELECT CITY, length(CITY) FROM STATION GROUP BY CITY HAVING LENGTH(CITY) IN (SELECT MIN(length(CITY)) FROM STATION) LIMIT 1);
#Q11
SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE 'a%' OR LOWER(CITY) LIKE 'e%' OR LOWER(CITY) LIKE 'i%'OR LOWER(CITY) LIKE 'o%' OR LOWER(CITY) LIKE 'u%' ORDER BY CITY;
#Q12
SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i'OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u' ORDER BY CITY;
#Q13
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE 'a%' OR LOWER(CITY) LIKE 'e%' OR LOWER(CITY) LIKE 'i%'OR LOWER(CITY) LIKE 'o%' OR LOWER(CITY) LIKE 'u%' ORDER BY CITY);
#14
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i'OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u' ORDER BY CITY);
#Q15
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE 'a%' OR LOWER(CITY) LIKE 'e%' OR LOWER(CITY) LIKE 'i%'OR LOWER(CITY) LIKE 'o%' OR LOWER(CITY) LIKE 'u%' ORDER BY CITY)
OR CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i'OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u' ORDER BY CITY);
#Q16
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE 'a%' OR LOWER(CITY) LIKE 'e%' OR LOWER(CITY) LIKE 'i%'OR LOWER(CITY) LIKE 'o%' OR LOWER(CITY) LIKE 'u%' ORDER BY CITY)
AND CITY NOT IN (SELECT DISTINCT CITY FROM STATION WHERE LOWER(CITY) LIKE '%a' OR LOWER(CITY) LIKE '%e' OR LOWER(CITY) LIKE '%i'OR LOWER(CITY) LIKE '%o' OR LOWER(CITY) LIKE '%u' ORDER BY CITY);

#PRODUCT TABLE
#Q17
#table data not available taking sample data
SELECT * FROM SALES;
SELECT * FROM PRODUCT WHERE PRODUCT_ID IN (SELECT PRODUCT_ID FROM SALES WHERE SALE_DATE BETWEEN '2019-01-01' and '2019-03-31');

#Q18
SELECT * FROM VIEWS WHERE AUTHOR_ID = VIEWER_ID;

#Q19
SELECT (COUNT(CASE WHEN ORDER_DATE = CUSTOMER_PREF_DELIVERY_DATE THEN 1 END)/COUNT(*) *100) PERCENTAGE_IMMIDIATE FROM DELIVERY;


#Q20
SELECT ADS.AD_ID, ROUND(COUNT(ADS.ACTIONN)/ ACTION_COUNT * 100,2) AS CTR
FROM
(SELECT AD_ID, COUNT(ACTIONN) AS ACTION_COUNT FROM ADS WHERE ACTIONN = "CLICKED" OR ACTIONN = "VIEWED" 
GROUP BY AD_ID HAVING COUNT(ACTIONN) >= 1) AS CTR_ACTION JOIN ADS ON CTR_ACTION.AD_ID = ADS.AD_ID
WHERE ACTIONN = "CLICKED"
GROUP BY ADS.AD_ID, ACTION_COUNT
UNION 
SELECT ADS.AD_ID,"0" AS CTR FROM ADS WHERE AD_ID NOT IN (SELECT AD_ID AS ACTION_COUNT FROM ADS WHERE ACTIONN = "CLICKED" OR ACTIONN = "VIEWED" 
GROUP BY AD_ID HAVING COUNT(ACTIONN) >= 1);

#Q21
SELECT ET.employee_id, TEAMS.team_size
FROM employee_team ET
JOIN (
  SELECT team_id, COUNT(*) AS team_size
  FROM employee_team
  GROUP BY team_id
) TEAMS ON ET.team_id = TEAMS.team_id;


#Q22 ON PRODUCT DATA
SELECT ROUND(AVG(UNIT_PRICE),0) FROM PRODUCT;
SELECT * FROM EMPLOYEE_TEAM;

#Q23
SELECT COUNTRY_NAME, CASE WHEN AVG(WEATHER_STATE) >= 15 THEN "Cold" WHEN AVG(WEATHER_STATE) >= 25 THEN "Hot" ELSE "WARM" END AS "WATHER_TYPE"
FROM COUNTRIES INNER JOIN WEATHER ON COUNTRIES.COUNTRY_ID = WEATHER.COUNTRY_ID WHERE MONTH(WEATHER.DAY) = 11
GROUP BY COUNTRY_NAME;

#Q24
SELECT PLAYER_ID, MIN(EVENT_DATE) FROM PLAYER_STATS GROUP BY PLAYER_ID;

#Q25
SELECT PLAYER_ID, DEVICE_ID FROM PLAYER_STATS WHERE EVENT_DATE IN (SELECT MIN(EVENT_DATE) FROM PLAYER_STATS GROUP BY PLAYER_ID );

#Q26 ,Q34
SELECT PRODUCTS.PRODUCT_NAME,SUM(UNIT) FROM ORDERS
JOIN PRODUCTS ON PRODUCTS.PRODUCT_ID = ORDERS.PRODUCT_ID
WHERE MONTH(ORDER_DATE) = 2  GROUP BY PRODUCTS.PRODUCT_NAME HAVING SUM(UNIT) >= 100;

#Q27
SELECT * FROM USERS WHERE MAIL REGEXP "^[a-zA-Z][a-zA-Z0-9._-]*[a-zA-Z0-9._-]@leetcode.com$";

#Q28
SELECT  CUSTOMER_ID,NAME  FROM 
(SELECT CUSTOMERS.CUSTOMER_ID,CUSTOMERS.NAME,SUM(QUANTITY*PRICE) AS TOTAL_PRICE_PER_CUST 
FROM PRODUCT 
JOIN ORDERS ON ORDERS.PRODUCT_ID = PRODUCT.PRODUCT_ID
JOIN CUSTOMERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
WHERE MONTH(ORDER_DATE) = 7
GROUP  BY CUSTOMERS.CUSTOMER_ID,NAME HAVING SUM(QUANTITY*PRICE) >=100 
UNION 
SELECT CUSTOMERS.CUSTOMER_ID,NAME,SUM(QUANTITY*PRICE) AS TOTAL_PRICE_PER_CUST FROM PRODUCT 
JOIN ORDERS ON ORDERS.PRODUCT_ID = PRODUCT.PRODUCT_ID
JOIN CUSTOMERS ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
WHERE MONTH(ORDER_DATE) = 6
GROUP  BY CUSTOMERS.CUSTOMER_ID,NAME HAVING SUM(QUANTITY*PRICE) >=100) AS TOTAL
GROUP BY CUSTOMER_ID, NAME
HAVING COUNT(CUSTOMER_ID) >1;

#Q29
SELECT TITLE FROM CONTENT JOIN TVPROGRAM ON TVPROGRAM.CONTENT_ID = CONTENT.CONTENT_ID
WHERE KIDS_CONTENT = "Y" AND MONTH(PROGRAM_DATE) = 6;

#Q30, Q31
SELECT QUERIES.ID, QUERIES.YEAR , CASE WHEN NPV>=0 THEN ROUND(NPV,0) ELSE 0 END AS NPV FROM
NPV RIGHT	 JOIN QUERIES ON QUERIES.ID = NPV.ID AND QUERIES.YEAR = NPV.YEAR
ORDER BY QUERIES.ID;

#Q32, Q37
SELECT UNIQUE_ID,NAME FROM EMPLOYEES E LEFT JOIN EMPLOYEEUNI EU ON EU.ID = E.ID;

#Q33
SELECT NAME,CASE WHEN SUM(DISTANCE)>0 THEN SUM(DISTANCE) ELSE 0 END AS DISTANCE_TRAVELLED FROM USERS LEFT 
JOIN RIDES ON RIDES.USER_ID = USERS.ID GROUP BY NAME ORDER BY DISTANCE_TRAVELLED DESC, NAME ;

#Q35
SELECT NAME, COUNT(MOVIERATING.USER_ID) AS TOTAL_MOVIES_RATED FROM MOVIERATING INNER JOIN USERS ON USERS.USER_ID = MOVIERATING.USER_ID 
GROUP BY NAME ORDER BY TOTAL_MOVIES_RATED DESC,NAME LIMIT 1;

SELECT TITLE, ROUND(AVG(RATING)) AVERAGE_RATING FROM MOVIERATING 
JOIN MOVIES ON MOVIES.MOVIE_ID = MOVIERATING.MOVIE_ID WHERE MONTH(CREATED_AT) = 2
GROUP BY MOVIES.MOVIE_ID, TITLE  ORDER BY AVERAGE_RATING DESC, TITLE LIMIT 1 ;


#Q36
SELECT NAME,CASE WHEN SUM(DISTANCE)>0 THEN SUM(DISTANCE) ELSE 0 END AS DISTANCE_TRAVELLED FROM USERS LEFT 
JOIN RIDES ON RIDES.USER_ID = USERS.ID GROUP BY NAME ORDER BY DISTANCE_TRAVELLED DESC, NAME ;

#37 ABOVE WITH EMPLOYEEUNI TABLE

#Q38
SELECT STUDENTS.ID,STUDENTS.NAME FROM STUDENTS LEFT JOIN DEPARTMENTS ON DEPARTMENTS.ID = STUDENTS.DEPARTMENT_ID
WHERE DEPARTMENTS.ID IS NULL;

#39
SELECT person1, person2,SUM(total_duration) FROM
(SELECT c.from_id AS person1, c.to_id AS person2, SUM(c.duration) AS total_duration
FROM Calls c
WHERE c.from_id < c.to_id
GROUP BY c.from_id, c.to_id
UNION
SELECT c.to_id, c.from_id, SUM(c.duration) AS total_duration
FROM Calls c
WHERE c.from_id > c.to_id
GROUP BY c.from_id, c.to_id) AS callsji GROUP BY person1, person2;


#40
SELECT PRODUCT_ID, ROUND(MULTIPLIED_PRICES/UNITS,2) FROM (
SELECT UNITSSOLD.PRODUCT_ID, SUM((UNITS*PRICE)) AS MULTIPLIED_PRICES, SUM(UNITS) AS UNITS FROM UNITSSOLD INNER JOIN PRICES 
ON PRICES.PRODUCT_ID = UNITSSOLD.PRODUCT_ID
WHERE PURCHASE_DATE BETWEEN START_DATE AND END_DATE GROUP BY UNITSSOLD.PRODUCT_ID) AS AVG_PRICES;

#Q41
SELECT WAREHOUSE.NAME,SUM(WIDTH*LENGTH*HEIGHT*WAREHOUSE.UNITS) FROM PRODUCTS
INNER JOIN WAREHOUSE ON PRODUCTS.PRODUCT_ID = WAREHOUSE.PRODUCT_ID
GROUP BY NAME;

#42
SELECT S1.SALE_DATE AS SALE_DATE,S1.SOLD_NUM - S2.SOLD_NUM FROM SALES S1 
JOIN SALES S2 ON S1.SALE_DATE = S2.SALE_DATE AND S1.FRUIT <> S2.FRUIT AND S1.FRUIT = "apples";

#43
SELECT COUNT(A1.PLAYER_ID)/(SELECT COUNT(DISTINCT PLAYER_ID) FROM ACTIVITY) AS FRACTION FROM ACTIVITY A1 
INNER JOIN ACTIVITY A2 WHERE A1.PLAYER_ID = A2.PLAYER_ID AND A1.EVENT_DATE = A2.EVENT_DATE + 1;

#44
SELECT NAME FROM EMPLOYEE WHERE ID IN ( 
SELECT MANAGERID FROM EMPLOYEE GROUP BY MANAGERID HAVING COUNT(MANAGERID)>=5);

#45
SELECT DEPT_NAME, COUNT(STUDENT.DEPT_ID) AS STUDENT_MEMBER FROM STUDENT 
RIGHT JOIN DEPARTMENT ON STUDENT.DEPT_ID = DEPARTMENT.DEPT_ID
GROUP BY DEPT_NAME;

#46
SELECT CUSTOMER_ID AS COUNT_PRODUCT_KEYS
FROM CUSTOMER JOIN PRODUCT 
ON CUSTOMER.PRODUCT_KEY = PRODUCT.PRODUCT_KEY 
GROUP BY CUSTOMER.CUSTOMER_ID
HAVING COUNT(DISTINCT CUSTOMER.PRODUCT_KEY) = (SELECT COUNT(DISTINCT PRODUCT_KEY) FROM PRODUCT);

#47
SELECT PROJECT.PROJECT_ID, PROJECT.EMPLOYEE_ID, MAX_EXP FROM
(SELECT PROJECT_ID, MAX(EXPERIENCE_YEARS) MAX_EXP FROM EMPLOYEE JOIN PROJECT 
ON PROJECT.EMPLOYEE_ID = EMPLOYEE.EMPLOYEE_ID GROUP BY PROJECT_ID) AS TEMP
JOIN PROJECT ON TEMP.PROJECT_ID = PROJECT.PROJECT_ID
JOIN EMPLOYEE ON EMPLOYEE.EMPLOYEE_ID = PROJECT.EMPLOYEE_ID
WHERE EXPERIENCE_YEARS = MAX_EXP;

#Q48
SELECT BOOKS.BOOK_ID FROM ORDERS JOIN BOOKS ON BOOKS.BOOK_ID = ORDERS.BOOK_ID
WHERE quantity <10 AND AVAILABLE_FROM < '2017-09-21';

#Q49
SELECT * FROM (
SELECT ROW_NUMBER() OVER(PARTITION BY E1.STUDENT_ID) AS RANKS ,E2.STUDENT_ID, E1.COURSE_ID, E1.GRADE FROM
(SELECT E1.STUDENT_ID ,MAX(E1.GRADE) GRADE FROM ENROLLMENTS E1
GROUP BY E1.STUDENT_ID
) E2
JOIN ENROLLMENTS E1 ON E2.STUDENT_ID = E1.STUDENT_ID AND E1.GRADE = E2.GRADE
) TMP WHERE RANKS = 1;

#50
SELECT GROUP_ID,PLAYER_ID FROM
(SELECT ROW_NUMBER() OVER(PARTITION BY GROUP_ID) TOP_ROW,PLAYERS.PLAYER_ID, GROUP_ID,MAX(TOTAL_SCORE) MAX_SCORE  FROM 
(SELECT FIRST_PLAYER AS PLAYER_ID, SUM(FIRST_SCORE) TOTAL_SCORE FROM MATCHES GROUP BY FIRST_PLAYER
UNION
SELECT SECOND_PLAYER, SUM(SECOND_SCORE) FROM MATCHES GROUP BY SECOND_PLAYER) TOTAL_SCORE_TABLE
INNER JOIN PLAYERS ON TOTAL_SCORE_TABLE.PLAYER_ID = PLAYERS.PLAYER_ID
GROUP BY GROUP_ID,PLAYERS.PLAYER_ID) AS TEMP3 WHERE TOP_ROW = 1;





